//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Tocar"",
            ""id"": ""18d463cb-ebe9-433e-8e8b-e39dfad2c2da"",
            ""actions"": [
                {
                    ""name"": ""InputToque"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d84e3546-f3e0-475a-b761-bb4b5bd1b781"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ContactoPrimario"",
                    ""type"": ""PassThrough"",
                    ""id"": ""75049a33-7ab1-441f-905a-be091c76eb31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PosiciónContacto"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e896520b-c1d0-475f-ab3a-e06d112c534f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c247a391-b023-462e-b593-a21c41dc2293"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ContactoPrimario"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c025d006-4ede-4ab9-ae7d-b4dd243e1b2f"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PosiciónContacto"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a558e22f-9d09-4ad0-bed5-2d074a75b9b9"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InputToque"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Tocar
        m_Tocar = asset.FindActionMap("Tocar", throwIfNotFound: true);
        m_Tocar_InputToque = m_Tocar.FindAction("InputToque", throwIfNotFound: true);
        m_Tocar_ContactoPrimario = m_Tocar.FindAction("ContactoPrimario", throwIfNotFound: true);
        m_Tocar_PosiciónContacto = m_Tocar.FindAction("PosiciónContacto", throwIfNotFound: true);
    }

    ~@InputControls()
    {
        UnityEngine.Debug.Assert(!m_Tocar.enabled, "This will cause a leak and performance issues, InputControls.Tocar.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Tocar
    private readonly InputActionMap m_Tocar;
    private List<ITocarActions> m_TocarActionsCallbackInterfaces = new List<ITocarActions>();
    private readonly InputAction m_Tocar_InputToque;
    private readonly InputAction m_Tocar_ContactoPrimario;
    private readonly InputAction m_Tocar_PosiciónContacto;
    public struct TocarActions
    {
        private @InputControls m_Wrapper;
        public TocarActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @InputToque => m_Wrapper.m_Tocar_InputToque;
        public InputAction @ContactoPrimario => m_Wrapper.m_Tocar_ContactoPrimario;
        public InputAction @PosiciónContacto => m_Wrapper.m_Tocar_PosiciónContacto;
        public InputActionMap Get() { return m_Wrapper.m_Tocar; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TocarActions set) { return set.Get(); }
        public void AddCallbacks(ITocarActions instance)
        {
            if (instance == null || m_Wrapper.m_TocarActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TocarActionsCallbackInterfaces.Add(instance);
            @InputToque.started += instance.OnInputToque;
            @InputToque.performed += instance.OnInputToque;
            @InputToque.canceled += instance.OnInputToque;
            @ContactoPrimario.started += instance.OnContactoPrimario;
            @ContactoPrimario.performed += instance.OnContactoPrimario;
            @ContactoPrimario.canceled += instance.OnContactoPrimario;
            @PosiciónContacto.started += instance.OnPosiciónContacto;
            @PosiciónContacto.performed += instance.OnPosiciónContacto;
            @PosiciónContacto.canceled += instance.OnPosiciónContacto;
        }

        private void UnregisterCallbacks(ITocarActions instance)
        {
            @InputToque.started -= instance.OnInputToque;
            @InputToque.performed -= instance.OnInputToque;
            @InputToque.canceled -= instance.OnInputToque;
            @ContactoPrimario.started -= instance.OnContactoPrimario;
            @ContactoPrimario.performed -= instance.OnContactoPrimario;
            @ContactoPrimario.canceled -= instance.OnContactoPrimario;
            @PosiciónContacto.started -= instance.OnPosiciónContacto;
            @PosiciónContacto.performed -= instance.OnPosiciónContacto;
            @PosiciónContacto.canceled -= instance.OnPosiciónContacto;
        }

        public void RemoveCallbacks(ITocarActions instance)
        {
            if (m_Wrapper.m_TocarActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITocarActions instance)
        {
            foreach (var item in m_Wrapper.m_TocarActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TocarActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TocarActions @Tocar => new TocarActions(this);
    public interface ITocarActions
    {
        void OnInputToque(InputAction.CallbackContext context);
        void OnContactoPrimario(InputAction.CallbackContext context);
        void OnPosiciónContacto(InputAction.CallbackContext context);
    }
}
